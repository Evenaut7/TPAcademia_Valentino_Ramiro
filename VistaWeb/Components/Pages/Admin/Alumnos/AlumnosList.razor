@page "/admin/alumnos"
@layout AdminLayout 

@using API.Clients
@using DTOs
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<PageTitle>Alumnos - Listado CRUD</PageTitle>

<h3 class="mb-4">Gestión de Alumnos (Listado)</h3>
<hr />

@if (isLoading)
{
    <div class="alert alert-info" role="alert">
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Cargando datos...
    </div>
}
else
{
    @* Botón de Creación *@
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" @onclick="NavigateToCreate">
            <span class="oi oi-plus" aria-hidden="true"></span> Agregar Alumno
        </button>
    </div>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            Error al cargar la lista: @errorMessage
        </div>
    }
    
    @* Tabla de Listado (Read) - El contenido principal a la derecha de la barra lateral *@
    @if (alumnos != null && alumnos.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover table-striped shadow-sm">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Email</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var alumno in alumnos)
                    {
                        <tr>
                            <td>@alumno.Id</td>
                            <td>@alumno.Nombre</td>
                            <td>@alumno.Apellido</td>
                            <td style="width: 190px;">
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => NavigateToEdit(alumno.Id)">
                                    <span class="oi oi-pencil" aria-hidden="true"></span> Editar
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteAlumno(alumno.Id)">
                                    <span class="oi oi-trash" aria-hidden="true"></span> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-secondary">No se encontraron alumnos registrados. ¡Cree el primero!</div>
    }
}

@code {
    private IEnumerable<AlumnoDTO> alumnos;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadAlumnos();
    }

    private async Task LoadAlumnos()
    {
        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            // Nota: Asumiendo que su AlumnoApiClient tiene un método para obtener todos.
            alumnos = await AlumnoApiClient.GetAllAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreate()
    {
        NavManager.NavigateTo("/admin/alumnos/crear");
    }

    private void NavigateToEdit(int id)
    {
        NavManager.NavigateTo($"/admin/alumnos/editar/{id}");
    }

    private async Task DeleteAlumno(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Confirmar la eliminación del Alumno con ID {id}?");
        if (confirmed)
        {
            try
            {
                await AlumnoApiClient.DeleteAsync(id); // Usa el método de su cliente
                await LoadAlumnos(); // Recargar el listado
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
    }
}