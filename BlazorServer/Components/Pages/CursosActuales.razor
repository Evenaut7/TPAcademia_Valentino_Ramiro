@page "/cursos-actuales"
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject AlumnoInscripcionApiClient AlumnoInscripcionApiClient
@inject CursoApiClient CursoApiClient
@inject MateriaApiClient MateriaApiClient
@inject ComisionApiClient ComisionApiClient

<h3 class="mb-4">Cursos Actuales</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
}

@if (isLoading)
{
    <div class="text-center my-4">
        <span class="spinner-border"></span> Cargando cursos...
    </div>
}
else if (misCursos?.Any() == true)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Materia</th>
                <th>Comisión</th>
                <th>Año</th>
                <th>Condición</th>
                <th>Nota</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var curso in misCursos)
            {
                <tr>
                    <td>@curso.Materia</td>
                    <td>@curso.Comision</td>
                    <td>@curso.AnioCalendario</td>
                    <td>@curso.Condicion</td>
                    <td>@curso.Nota</td>
                    <td>
                        <button class="btn btn-danger btn-sm"
                                disabled="@isProcessing"
                                @onclick="() => DesuscribirseAsync(curso.InscripcionId)">
                            Desuscribirse
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info">No estás inscripto en ningún curso.</div>
}

@code {
    private List<CursoActualViewModel> misCursos = new();
    private bool isLoading = true;
    private bool isProcessing = false;
    private string? errorMessage;
    private string? successMessage;
    private int alumnoId;

    protected override async Task OnInitializedAsync()
    {
        alumnoId = await AuthService.GetUserIdAsync();
        await CargarMisCursosAsync();
    }

    private async Task CargarMisCursosAsync()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        misCursos.Clear();

        try
        {
            var listaInscripciones = await AlumnoInscripcionApiClient.GetAllAsync();
            var listaCursos = await CursoApiClient.GetAllAsync();
            var listaMaterias = await MateriaApiClient.GetAllAsync();
            var listaComisiones = await ComisionApiClient.GetAllAsync();

            misCursos = listaInscripciones
                .Where(insc => insc.AlumnoId == alumnoId)
                .Select(insc =>
                {
                    var curso = listaCursos.FirstOrDefault(c => c.Id == insc.CursoId);
                    var materia = listaMaterias.FirstOrDefault(m => m.Id == curso?.MateriaId);
                    var comision = listaComisiones.FirstOrDefault(co => co.Id == curso?.ComisionId);

                    return new CursoActualViewModel
                    {
                        InscripcionId = insc.Id,
                        Materia = materia?.Descripcion ?? "Materia no encontrada",
                        Comision = comision?.Nombre ?? "Comisión no encontrada",
                        AnioCalendario = curso?.AnioCalendario ?? 0,
                        Condicion = insc.Condicion,
                        Nota = insc.Nota.HasValue ? insc.Nota.Value.ToString("F2") : "-"
                    };
                })
                .ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar tus cursos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DesuscribirseAsync(int inscripcionId)
    {
        errorMessage = null;
        successMessage = null;
        isProcessing = true;

        try
        {
            await AlumnoInscripcionApiClient.DeleteAsync(inscripcionId);
            successMessage = "Te has desuscripto exitosamente del curso.";
            await CargarMisCursosAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al desuscribirse: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private class CursoActualViewModel
    {
        public int InscripcionId { get; set; }
        public string Materia { get; set; } = "";
        public string Comision { get; set; } = "";
        public int AnioCalendario { get; set; }
        public string Condicion { get; set; } = "";
        public string Nota { get; set; } = "-";
    }
}