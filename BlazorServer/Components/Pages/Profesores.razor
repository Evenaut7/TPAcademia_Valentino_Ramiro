@page "/profesores"
@rendermode InteractiveServer
@inject ProfesorApiClient ProfesorApiClient
@inject IJSRuntime js

<PageTitle>Profesores</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Profesores</h3>
    <button class="btn btn-primary" @onclick="MostrarModal">
        <i class="bi bi-plus-circle"></i> Nuevo Profesor
    </button>
</div>

@if (profesores == null)
{
    <p><em>Cargando profesores...</em></p>
}
else if (!profesores.Any())
{
    <p>No hay profesores registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>DNI</th>
                <th>Fecha Nacimiento</th>
                <th>Cargo</th>
                <th>Opciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var profesor in profesores)
            {
                <tr>
                    <td>@profesor.Id</td>
                    <td>@profesor.Nombre</td>
                    <td>@profesor.Apellido</td>
                    <td>@profesor.Dni</td>
                    <td>@profesor.FechaNacimiento.ToShortDateString()</td>
                    <td>@profesor.Cargo</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ModificarProfesor(profesor)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarProfesor(profesor.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(esEdicion ? "Editar Profesor" : "Nuevo Profesor")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@nuevoProfesor" OnValidSubmit="GuardarProfesor">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label>Nombre:</label>
                            <InputText class="form-control" @bind-Value="nuevoProfesor.Nombre" />
                        </div>
                        <div class="mb-3">
                            <label>Apellido:</label>
                            <InputText class="form-control" @bind-Value="nuevoProfesor.Apellido" />
                        </div>
                        <div class="mb-3">
                            <label>DNI:</label>
                            <InputNumber class="form-control" @bind-Value="nuevoProfesor.Dni" />
                        </div>
                        <div class="mb-3">
                            <label>Fecha de nacimiento:</label>
                            <InputDate class="form-control" @bind-Value="nuevoProfesor.FechaNacimiento" />
                        </div>
                        <div class="mb-3">
                            <label>Cargo:</label>
                            <InputText class="form-control" @bind-Value="nuevoProfesor.Cargo" />
                        </div>
                        <div class="text-end">
                            <button type="submit" class="btn btn-success me-2">Guardar</button>
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProfesorDTO>? profesores;
    private bool mostrarModal = false;
    private bool esEdicion = false;
    private ProfesorDTO nuevoProfesor = new ProfesorDTO();

    protected override async Task OnInitializedAsync()
    {
        await CargarProfesores();
    }

    private async Task CargarProfesores()
    {
        try
        {
            var result = await ProfesorApiClient.GetAllAsync();
            profesores = result?.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar profesores: {ex.Message}");
        }
    }

    private void MostrarModal()
    {
        esEdicion = false;
        nuevoProfesor = new ProfesorDTO
        {
            FechaNacimiento = DateTime.Today
        };
        mostrarModal = true;
    }

    private void ModificarProfesor(ProfesorDTO profesor)
    {
        esEdicion = true;
        nuevoProfesor = new ProfesorDTO
        {
            Id = profesor.Id,
            Nombre = profesor.Nombre,
            Apellido = profesor.Apellido,
            Dni = profesor.Dni,
            FechaNacimiento = profesor.FechaNacimiento,
            Cargo = profesor.Cargo
        };
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        esEdicion = false;
    }

    private async Task GuardarProfesor()
    {
        try
        {
            // Validar campos obligatorios
            if (string.IsNullOrWhiteSpace(nuevoProfesor.Nombre))
            {
                await js.InvokeVoidAsync("alert", "El nombre es obligatorio");
                return;
            }
            if (string.IsNullOrWhiteSpace(nuevoProfesor.Apellido))
            {
                await js.InvokeVoidAsync("alert", "El apellido es obligatorio");
                return;
            }
            if (nuevoProfesor.Dni < 1000000 || nuevoProfesor.Dni > 99999999)
            {
                await js.InvokeVoidAsync("alert", "El DNI debe tener entre 7 y 8 dígitos");
                return;
            }
            if (string.IsNullOrWhiteSpace(nuevoProfesor.Cargo))
            {
                await js.InvokeVoidAsync("alert", "El cargo es obligatorio");
                return;
            }
            if (nuevoProfesor.Cargo.Length > 100)
            {
                await js.InvokeVoidAsync("alert", "El cargo no puede superar los 100 caracteres");
                return;
            }

            if (esEdicion)
            {
                await ProfesorApiClient.UpdateAsync(nuevoProfesor);
                await js.InvokeVoidAsync("alert", "Profesor modificado correctamente");
            }
            else
            {
                await ProfesorApiClient.AddAsync(nuevoProfesor);
                await js.InvokeVoidAsync("alert", "Profesor creado correctamente");
            }
            CerrarModal();
            await CargarProfesores();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private async Task EliminarProfesor(int id)
    {
        if (await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este profesor?"))
        {
            try
            {
                await ProfesorApiClient.DeleteAsync(id);
                await CargarProfesores();
                StateHasChanged();
                await js.InvokeVoidAsync("alert", "Profesor eliminado correctamente");
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }
}