@page "/comisiones"
@rendermode InteractiveServer
@inject ComisionApiClient ComisionApiClient
@inject PlanApiClient PlanApiClient
@inject IJSRuntime js

<PageTitle>Comisiones</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Comisiones</h3>
    <button class="btn btn-primary" @onclick="MostrarModal">
        <i class="bi bi-plus-circle"></i> Nueva Comisión
    </button>
</div>

@if (comisiones == null)
{
    <p><em>Cargando comisiones...</em></p>
}
else if (!comisiones.Any())
{
    <p>No hay comisiones registradas.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Año Especialidad</th>
                <th>Plan</th>
                <th>Opciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comision in comisiones)
            {
                <tr>
                    <td>@comision.Id</td>
                    <td>@comision.Nombre</td>
                    <td>@comision.AnioEspecialidad</td>
                    <td>@GetPlanDesc(comision.PlanId)</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ModificarComision(comision)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarComision(comision.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(esEdicion ? "Editar Comisión" : "Nueva Comisión")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@nuevaComision" OnValidSubmit="GuardarComision">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label>Nombre:</label>
                            <InputText class="form-control" @bind-Value="nuevaComision.Nombre" />
                        </div>
                        <div class="mb-3">
                            <label>Año Especialidad:</label>
                            <InputNumber class="form-control" @bind-Value="nuevaComision.AnioEspecialidad" min="1" />
                        </div>
                        <div class="mb-3">
                            <label>Plan:</label>
                            @if (planes != null && planes.Any())
                            {
                                <InputSelect class="form-control" @bind-Value="nuevaComision.PlanId">
                                    <option value="0">-- Seleccione un Plan --</option>
                                    @foreach (var plan in planes)
                                    {
                                        <option value="@plan.Id">@plan.Descripcion</option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <p class="text-muted">Cargando planes...</p>
                            }
                        </div>
                        <div class="text-end">
                            <button type="submit" class="btn btn-success me-2">Guardar</button>
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ComisionDTO>? comisiones;
    private List<PlanDTO>? planes;
    private bool mostrarModal = false;
    private bool esEdicion = false;
    private ComisionDTO nuevaComision = new ComisionDTO();

    protected override async Task OnInitializedAsync()
    {
        await CargarComisiones();
        await CargarPlanes();
    }

    private async Task CargarComisiones()
    {
        try
        {
            var result = await ComisionApiClient.GetAllAsync();
            comisiones = result?.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar comisiones: {ex.Message}");
        }
    }

    private async Task CargarPlanes()
    {
        try
        {
            var result = await PlanApiClient.GetAllAsync();
            planes = result?.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar planes: {ex.Message}");
        }
    }

    private void MostrarModal()
    {
        esEdicion = false;
        nuevaComision = new ComisionDTO();
        mostrarModal = true;
    }

    private void ModificarComision(ComisionDTO comision)
    {
        esEdicion = true;
        nuevaComision = new ComisionDTO
        {
            Id = comision.Id,
            Nombre = comision.Nombre,
            AnioEspecialidad = comision.AnioEspecialidad,
            PlanId = comision.PlanId
        };
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        esEdicion = false;
    }

    private async Task GuardarComision()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(nuevaComision.Nombre))
            {
                await js.InvokeVoidAsync("alert", "El nombre es obligatorio");
                return;
            }
            if (nuevaComision.AnioEspecialidad <= 0)
            {
                await js.InvokeVoidAsync("alert", "El año de especialidad debe ser mayor a 0");
                return;
            }
            if (nuevaComision.PlanId == 0)
            {
                await js.InvokeVoidAsync("alert", "Debe seleccionar un plan");
                return;
            }

            if (esEdicion)
            {
                await ComisionApiClient.UpdateAsync(nuevaComision.Id, nuevaComision);
                await js.InvokeVoidAsync("alert", "Comisión modificada correctamente");
            }
            else
            {
                await ComisionApiClient.AddAsync(nuevaComision);
                await js.InvokeVoidAsync("alert", "Comisión creada correctamente");
            }
            CerrarModal();
            await CargarComisiones();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private async Task EliminarComision(int id)
    {
        if (await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta comisión?"))
        {
            try
            {
                await ComisionApiClient.DeleteAsync(id);
                await CargarComisiones();
                StateHasChanged();
                await js.InvokeVoidAsync("alert", "Comisión eliminada correctamente");
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }

    private string GetPlanDesc(int planId)
    {
        if (planes == null) return "Desconocido";
        var plan = planes.FirstOrDefault(p => p.Id == planId);
        return plan?.Descripcion ?? "Desconocido";
    }
}