@page "/alumnos"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject AlumnoApiClient AlumnoApiClient
@inject IJSRuntime js

<PageTitle>Alumnos</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Alumnos</h3>
    <button class="btn btn-primary" @onclick="MostrarModal">
        <i class="bi bi-plus-circle"></i> Nuevo Alumno
    </button>
</div>

@if (alumnos == null)
{
    <p><em>Cargando Alumnos...</em></p>
}
else if (!alumnos.Any())
{
    <p>No hay alumnos registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Dni</th>
                <th>Legajo</th>
                <th>Fecha De Nacimiento</th>
                <th>Usuario Asignado</th>
                <th>Opciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var alumno in alumnos)
            {
                <tr>
                    <td>@alumno.Id</td>
                    <td>@alumno.Nombre</td>
                    <td>@alumno.Apellido</td>
                    <td>@alumno.Dni</td>
                    <td>@alumno.Legajo</td>
                    <td>@alumno.FechaNacimiento.ToShortDateString()</td>
                    <td>@(alumno.Usuario?.NombreUsuario ?? "Sin usuario")</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="@(async () => await ModificarAlumno(alumno))">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="@(async () => await EliminarAlumno(alumno.Id))">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>

    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(esEdicion ? "Editar Alumno" : "Nuevo Alumno")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@nuevoAlumno" OnValidSubmit="GuardarAlumno">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Nombre:</label>
                            <InputText class="form-control" @bind-Value="nuevoAlumno.Nombre" />
                        </div>

                        <div class="mb-3">
                            <label>Apellido:</label>
                            <InputText class="form-control" @bind-Value="nuevoAlumno.Apellido" />
                        </div>

                        <div class="mb-3">
                            <label>DNI:</label>
                            <InputNumber class="form-control" @bind-Value="nuevoAlumno.Dni" />
                        </div>

                        <div class="mb-3">
                            <label>Fecha de nacimiento:</label>
                            <InputDate class="form-control" @bind-Value="nuevoAlumno.FechaNacimiento" />
                        </div>

                        <div class="mb-3">
                            <label>Legajo:</label>
                            <InputNumber class="form-control" @bind-Value="nuevoAlumno.Legajo" />
                        </div>

                        <div class="text-end">
                            <button type="submit" class="btn btn-success me-2">Guardar</button>
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<AlumnoDTO>? alumnos;
    private bool mostrarModal = false;
    private bool esEdicion = false;
    private AlumnoDTO nuevoAlumno = new AlumnoDTO();

    protected override async Task OnInitializedAsync()
    {
        await CargarAlumnos();
    }

    private async Task CargarAlumnos()
    {
        try
        {
            var alumnosList = await AlumnoApiClient.GetAllAsync();
            var usuariosList = await UsuarioApiClient.GetAllAsync();

            alumnos = alumnosList.Select(a => new AlumnoDTO
            {
                Id = a.Id,
                Nombre = a.Nombre,
                Apellido = a.Apellido,
                Dni = a.Dni,
                FechaNacimiento = a.FechaNacimiento,
                Legajo = a.Legajo,
                Usuario = usuariosList.FirstOrDefault(u => u.PersonaId == a.Id)
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar alumnos: {ex.Message}");
        }
    }

    private void MostrarModal()
    {
        esEdicion = false;
        nuevoAlumno = new AlumnoDTO
        {
            FechaNacimiento = DateTime.Today
        };
        mostrarModal = true;
        StateHasChanged();
    }

    private Task ModificarAlumno(AlumnoDTO alumno)
    {
        esEdicion = true;
        nuevoAlumno = new AlumnoDTO
        {
            Id = alumno.Id,
            Nombre = alumno.Nombre,
            Apellido = alumno.Apellido,
            Dni = alumno.Dni,
            Legajo = alumno.Legajo,
            FechaNacimiento = alumno.FechaNacimiento
        };
        mostrarModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        esEdicion = false;
    }

    private async Task GuardarAlumno()
    {
        try
        {
            // Validar campos obligatorios
            if (string.IsNullOrWhiteSpace(nuevoAlumno.Nombre))
            {
                await js.InvokeVoidAsync("alert", "El nombre es obligatorio");
                return;
            }
            if (string.IsNullOrWhiteSpace(nuevoAlumno.Apellido))
            {
                await js.InvokeVoidAsync("alert", "El apellido es obligatorio");
                return;
            }
            if (nuevoAlumno.Dni < 1000000 || nuevoAlumno.Dni > 99999999)
            {
                await js.InvokeVoidAsync("alert", "El DNI debe tener entre 7 y 8 dígitos");
                return;
            }
            if (nuevoAlumno.Legajo <= 0)
            {
                await js.InvokeVoidAsync("alert", "El legajo debe ser un número positivo");
                return;
            }
            if (nuevoAlumno.FechaNacimiento > DateTime.Today)
            {
                await js.InvokeVoidAsync("alert", "La fecha de nacimiento no puede ser futura");
                return;
            }

            if (esEdicion)
            {
                await AlumnoApiClient.UpdateAsync(nuevoAlumno);
                await js.InvokeVoidAsync("alert", "Alumno modificado correctamente");
            }
            else
            {
                await AlumnoApiClient.AddAsync(nuevoAlumno);
                await js.InvokeVoidAsync("alert", "Alumno creado correctamente");
            }

            await CargarAlumnos();
            CerrarModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private async Task EliminarAlumno(int id)
    {
        if (await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este alumno?"))
        {
            try
            {
                await AlumnoApiClient.DeleteAsync(id);
                await CargarAlumnos();
                await js.InvokeVoidAsync("alert", "Alumno eliminado correctamente");
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }
}