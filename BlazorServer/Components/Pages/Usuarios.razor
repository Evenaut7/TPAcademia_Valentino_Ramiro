@page "/usuarios"
@rendermode InteractiveServer
@using API.Clients
@using DTOs
@inject IJSRuntime js

<PageTitle>Usuarios</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Usuarios</h3>
    <button class="btn btn-primary" @onclick="MostrarModal">
        <i class="bi bi-plus-circle"></i> Nuevo Usuario
    </button>
</div>

@if (usuarios == null)
{
    <p><em>Cargando usuarios...</em></p>
}
else if (!usuarios.Any())
{
    <p>No hay usuarios registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre Usuario</th>
                <th>Email</th>
                <th>Privilegio</th>
                <th>Persona</th>
                <th>Plan</th>
                <th>Habilitado</th>
                <th>Opciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in usuarios)
            {
                <tr>
                    <td>@usuario.Id</td>
                    <td>@usuario.NombreUsuario</td>
                    <td>@usuario.Email</td>
                    <td>
                        <span class="badge bg-info">@usuario.Privilegio</span>
                    </td>
                    <td>@GetPersonaNombre(usuario.PersonaId)</td>
                    <td>
                        @if (usuario.Habilitado)
                        {
                            <span class="badge bg-success">Sí</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">No</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ModificarUsuario(usuario)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarUsuario(usuario.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                    <td>
                        @if (usuario.Plan != null)
                        {
                            <span>@usuario.Plan.Descripcion (@GetEspecialidadDescripcion(usuario.Plan.EspecialidadId))</span>
                        }
                        else
                        {
                            <span class="text-muted">Sin plan</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(esEdicion ? "Editar Usuario" : "Nuevo Usuario")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@nuevoUsuario" OnValidSubmit="GuardarUsuario">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Nombre Usuario:</label>
                            <InputText class="form-control" @bind-Value="nuevoUsuario.NombreUsuario" />
                        </div>

                        <div class="mb-3">
                            <label>Email:</label>
                            <InputText type="email" class="form-control" @bind-Value="nuevoUsuario.Email" />
                        </div>

                        <div class="mb-3">
                            <label>Clave:</label>
                            <InputText type="text" class="form-control" @bind-Value="nuevoUsuario.Clave"
                                       placeholder="@(esEdicion ? "Dejar vacío para no modificar" : "Ingresar clave")" />
                            @if (esEdicion)
                            {
                                <small class="form-text text-muted">
                                    Si no deseas cambiar la clave, deja este campo vacío.
                                </small>
                            }
                        </div>

                        <div class="mb-3">
                            <label>Privilegio:</label>
                            <InputSelect class="form-control" @bind-Value="nuevoUsuario.Privilegio">
                                <option value="Usuario">Usuario</option>
                                <option value="Administrador">Administrador</option>
                                <option value="Docente">Docente</option>
                                <option value="Alumno">Alumno</option>
                                <option value="Plan">Plan</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label>Alumno:</label>
                            @if (listaPersonas != null && listaPersonas.Any())
                            {
                                <InputSelect class="form-control" @bind-Value="nuevoUsuario.PersonaId">
                                    <option value="0">-- Seleccione un Alumno --</option>
                                    @foreach (var persona in listaPersonas)
                                    {
                                        <option value="@persona.Id">@persona.Nombre</option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <p class="text-muted">Cargando personas...</p>
                            }
                        </div>

                        <div class="mb-3">
                            <label>Plan:</label>
                            @if (esEdicion)
                            {
                                <input class="form-control" type="text" value="@GetPlanDescripcion(nuevoUsuario.PlanId)" readonly />
                            }
                            else if (listaPlanes != null && listaPlanes.Any())
                            {
                                <InputSelect class="form-control" @bind-Value="nuevoUsuario.PlanId">
                                    <option value="">-- Seleccione un Plan --</option>
                                    @foreach (var plan in listaPlanes)
                                    {
                                        <option value="@plan.Id">@plan.Descripcion (@GetEspecialidadDescripcion(plan.EspecialidadId))</option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <p class="text-muted">Cargando planes...</p>
                            }
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" id="habilitadoCheck" @bind-Value="nuevoUsuario.Habilitado" />
                            <label class="form-check-label" for="habilitadoCheck">
                                Habilitado
                            </label>
                        </div>

                        <div class="text-end">
                            <button type="submit" class="btn btn-success me-2">Guardar</button>
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UsuarioDTO>? usuarios;
    private List<PersonaItem>? listaPersonas;
    private bool mostrarModal = false;
    private bool esEdicion = false;
    private UsuarioDTO nuevoUsuario = new UsuarioDTO();
    private List<EspecialidadDTO> especialidades = new();
    private List<PlanDTO> listaPlanes = new();

    private class PersonaItem
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
        await CargarPersonas();
        await CargarEspecialidades();
        await CargarPlanes();
    }

    private async Task CargarPlanes()
    {
        try
        {
            listaPlanes = (await PlanApiClient.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar planes: {ex.Message}");
        }
    }

    private async Task CargarEspecialidades()
    {
        try
        {
            especialidades = (await EspecialidadApiClient.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar especialidades: {ex.Message}");
        }
    }

    private string GetEspecialidadDescripcion(int especialidadId)
    {
        var esp = especialidades.FirstOrDefault(e => e.Id == especialidadId);
        return esp?.Descripcion ?? "Sin especialidad";
    }

    private string GetPlanDescripcion(int? planId)
    {
        if (planId == null) return "Sin plan";
        var plan = listaPlanes.FirstOrDefault(p => p.Id == planId.Value);
        if (plan == null) return "Sin plan";
        return $"{plan.Descripcion} ({GetEspecialidadDescripcion(plan.EspecialidadId)})";
    }

    private async Task CargarUsuarios()
    {
        try
        {
            var result = await UsuarioApiClient.GetAllAsync();
            usuarios = result?.ToList();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error al cargar usuarios: {ex.Message}");
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    private async Task CargarPersonas()
    {
        try
        {
            var listaAlumnos = await AlumnoApiClient.GetAllAsync();

            listaPersonas = listaAlumnos
                .Select(a => new PersonaItem { Id = a.Id, Nombre = $"{a.Nombre} {a.Apellido}" })
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar personas: {ex.Message}");
        }
    }

    private void MostrarModal()
    {
        esEdicion = false;
        nuevoUsuario = new UsuarioDTO
            {
                Habilitado = true,
                Privilegio = "Usuario"
            };
        mostrarModal = true;
    }

    private void ModificarUsuario(UsuarioDTO usuario)
    {
        esEdicion = true;
        nuevoUsuario = new UsuarioDTO
            {
                Id = usuario.Id,
                NombreUsuario = usuario.NombreUsuario,
                Email = usuario.Email,
                Privilegio = usuario.Privilegio,
                PersonaId = usuario.PersonaId,
                PlanId = usuario.PlanId,
                Habilitado = usuario.Habilitado,
                Clave = "", 
                Salt = usuario.Salt 
            };
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        esEdicion = false;
    }

    private async Task GuardarUsuario()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(nuevoUsuario.NombreUsuario))
            {
                await js.InvokeVoidAsync("alert", "El nombre de usuario es obligatorio");
                return;
            }

            if (string.IsNullOrWhiteSpace(nuevoUsuario.Email))
            {
                await js.InvokeVoidAsync("alert", "El email es obligatorio");
                return;
            }

            if (!esEdicion && string.IsNullOrWhiteSpace(nuevoUsuario.Clave))
            {
                await js.InvokeVoidAsync("alert", "La clave es obligatoria para nuevos usuarios");
                return;
            }

            if (nuevoUsuario.PersonaId == 0)
            {
                await js.InvokeVoidAsync("alert", "Debe seleccionar una persona");
                return;
            }

            // VALIDACIÓN DE PLAN SEGÚN PRIVILEGIO
            if (nuevoUsuario.Privilegio == "Usuario" && (!nuevoUsuario.PlanId.HasValue || nuevoUsuario.PlanId == 0))
            {
                await js.InvokeVoidAsync("alert", "Debe seleccionar un plan para usuarios de tipo 'Usuario'");
                return;
            }
            if (nuevoUsuario.Privilegio == "Administrador" && (nuevoUsuario.PlanId.HasValue && nuevoUsuario.PlanId != 0))
            {
                await js.InvokeVoidAsync("alert", "No debe seleccionar un plan para usuarios de tipo 'Administrador'");
                return;
            }

            if (esEdicion)
            {
                await UsuarioApiClient.UpdateAsync(nuevoUsuario);
                await js.InvokeVoidAsync("alert", "Usuario modificado correctamente");
            }
            else
            {
                await UsuarioApiClient.AddAsync(nuevoUsuario);
                await js.InvokeVoidAsync("alert", "Usuario creado correctamente");
            }

            CerrarModal();
            await CargarUsuarios();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private async Task EliminarUsuario(int id)
    {
        if (await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este usuario?"))
        {
            try
            {
                await UsuarioApiClient.DeleteAsync(id);
                await CargarUsuarios();
                StateHasChanged();
                await js.InvokeVoidAsync("alert", "Usuario eliminado correctamente");
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }

    private string GetPersonaNombre(int personaId)
    {
        if (listaPersonas == null) return "No asignado";
        var persona = listaPersonas.FirstOrDefault(p => p.Id == personaId);
        return persona?.Nombre ?? "No asignado";
    }
}