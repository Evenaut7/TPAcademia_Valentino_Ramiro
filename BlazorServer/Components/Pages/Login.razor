@page "/login"
@rendermode InteractiveServer
@using API.Auth.Blazor.Server
@using System.ComponentModel.DataAnnotations
@layout Layout.LoginLayout
@inject NavigationManager Navigation
@inject IAuthService AuthService

<h3 class="mb-4 text-center">Iniciar Sesión</h3>

@if (showDebug)
{
    <div class="alert alert-info">
        <strong>Debug:</strong> El método HandleLogin fue ejecutado.
        Usuario: @loginModel.Usuario, Clave: @loginModel.Clave
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="usuario" class="form-label">Usuario</label>
        <InputText id="usuario" class="form-control" @bind-Value="loginModel.Usuario" />
    </div>
    <div class="mb-3">
        <label for="clave" class="form-label">Clave</label>
        <InputText id="clave" type="password" class="form-control" @bind-Value="loginModel.Clave" />
    </div>
    <button type="submit" class="btn btn-primary w-100">Ingresar</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private bool showDebug = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        showDebug = true;
        errorMessage = string.Empty;
        Console.WriteLine($"Usuario: {loginModel.Usuario}, Clave: {loginModel.Clave}");

        try
        {
            var success = await AuthService.LoginAsync(loginModel.Usuario, loginModel.Clave);
            if (success)
            {
                var role = await AuthService.GetUserRoleAsync();
                Navigation.NavigateTo("/");
                // Optionally, you can redirect to different pages based on role here
            }
            else
            {
                errorMessage = "Usuario o clave incorrectos."; // Show error in UI
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; // Show backend error in UI
            Console.WriteLine($"Exception: {ex}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es obligatorio")]
        public string Usuario { get; set; } = string.Empty;

        [Required(ErrorMessage = "La clave es obligatoria")]
        public string Clave { get; set; } = string.Empty;
    }
}